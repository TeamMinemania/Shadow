package net.shadow.feature.module.exploit;

import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.UpdateSignC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.shadow.Shadow;
import net.shadow.event.events.RenderListener;
import net.shadow.feature.base.Module;
import net.shadow.feature.base.ModuleType;
import net.shadow.feature.configuration.CustomValue;
import net.shadow.feature.configuration.SliderValue;
import net.shadow.utils.ChatUtils;
import net.shadow.utils.RenderUtils;
import net.shadow.utils.Utils;

import java.awt.*;

public class SignUpdater extends Module implements RenderListener {
    static BlockPos globalpos = new BlockPos(0, 0, 0);
    final SliderValue radius = this.config.create("Radius", 1, 1, 100, 1);
    final CustomValue<String> text1 = this.config.create("text1", "shadowo");
    final CustomValue<String> text2 = this.config.create("text2", "shadowo");
    final CustomValue<String> text3 = this.config.create("text3", "shadowo");
    final CustomValue<String> text4 = this.config.create("text4", "shadowo");

    public SignUpdater() {
        super("SignUpdater", "Update all signs around", ModuleType.EXPLOIT);
    }

    @Override
    public void onEnable() {
        Shadow.getEventSystem().add(RenderListener.class, this);
        ChatUtils.message("Working... (Expect Lag)");
        BlockPos before = Shadow.c.player.getBlockPos();
        new Thread(() -> {
            int l = (int) Math.round(radius.getThis());
            for (int x = -l; x < l; x++)
                for (int y = -l; y < l; y++)
                    for (int z = -l; z < l; z++) {
                        BlockPos pos = before.add(new BlockPos(x, y, z));
                        globalpos = pos;
                        Block b;
                        if (!Shadow.c.world.getBlockState(pos).isAir()) {
                            b = Shadow.c.world.getBlockState(pos).getBlock();
                        } else {
                            b = Blocks.AIR;
                        }
                        if (b.equals(Blocks.OAK_SIGN) || b.equals(Blocks.OAK_WALL_SIGN) || b.equals(Blocks.SPRUCE_SIGN) || b.equals(Blocks.SPRUCE_WALL_SIGN) || b.equals(Blocks.DARK_OAK_SIGN) || b.equals(Blocks.DARK_OAK_WALL_SIGN) || b.equals(Blocks.JUNGLE_SIGN) || b.equals(Blocks.JUNGLE_WALL_SIGN) || b.equals(Blocks.BIRCH_SIGN) || b.equals(Blocks.BIRCH_WALL_SIGN) || b.equals(Blocks.ACACIA_SIGN) || b.equals(Blocks.ACACIA_WALL_SIGN) || b.equals(Blocks.WARPED_SIGN) || b.equals(Blocks.WARPED_WALL_SIGN) || b.equals(Blocks.CRIMSON_SIGN) || b.equals(Blocks.CRIMSON_WALL_SIGN)) {
                            Shadow.c.player.networkHandler.sendPacket(new UpdateSignC2SPacket(pos, text1.getThis(), text2.getThis(), text3.getThis(), text4.getThis()));
                            ChatUtils.message("Changed Sign at X:" + pos.getX() + " Y:" + pos.getY() + " Z:" + pos.getZ());
                        }
                        Utils.sleep(0);
                    }
            ChatUtils.message("Done!");
            this.setEnabled(false);
        }).start();

    }

    @Override
    public void onDisable() {
        Shadow.getEventSystem().remove(RenderListener.class, this);
    }

    @Override
    public void onUpdate() {

    }

    @Override
    public void onRender() {

    }

    @Override
    public void onRender(float partialTicks, MatrixStack matrix) {
        Vec3d vp = new Vec3d(globalpos.getX() - 1.5, globalpos.getY() - 1.5, globalpos.getZ() - 1.5);
        RenderUtils.renderObject(vp, new Vec3d(3, 3, 3), new Color(53, 53, 53, 100), matrix);
    }
}
